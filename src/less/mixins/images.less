////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Image Mixins
//
// TOC:
//
// :Responsive Image
// :Retina Image
// :Twin Mountain Peaks Shape
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Responsive image
//
// Allow browsers to determine video or slideshow dimensions based on the width of
// their containing block by creating an intrinsic ratio that will properly scale
// on any device.
// Rules are directly applied to <iframe>, <embed>, <video>, and <object> elements;
// optionally use anexplicit descendant class .embed-responsive-item when you want
// to match the styling for other attributes.
//
// Pro-Tip! You don't need to include frameborder="0" in your <iframe>s as we override
// that for you.
//
//----------------------------------------------------------------------------------------------------------------------
.img-responsive(@display: block) {
  display: @display;
  max-width: 100%; // Part 1: Set a maximum relative to the parent
  height: auto; // Part 2: Scale the height according to the width, otherwise you get stretching
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Retina image
//
// Specify two image paths and the @1x image dimensions, this mixin will provide an
// @2x media query. If you have many
// images to serve, consider writing your retina image CSS manually in a single media query.
//----------------------------------------------------------------------------------------------------------------------
.img-retina(@file-1x; @file-2x; @width-1x; @height-1x) {
  background-image: url("@{file-1x}");

  @media
  only screen and (-webkit-min-device-pixel-ratio: 2),
  only screen and (   min--moz-device-pixel-ratio: 2),
  only screen and (     -o-min-device-pixel-ratio: 2/1),
  only screen and (        min-device-pixel-ratio: 2),
  only screen and (                min-resolution: 192dpi),
  only screen and (                min-resolution: 2dppx) {
    background-image: url("@{file-2x}");
    background-size: @width-1x @height-1x;
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Image sharpening
//
// Improves sharpness of images when scaled down
//
//----------------------------------------------------------------------------------------------------------------------
.img-sharpen {
  image-rendering: optimizeSpeed;             // Legal fallback
  image-rendering: -moz-crisp-edges;          // Firefox
  image-rendering: -o-crisp-edges;            // Opera
  image-rendering: -webkit-optimize-contrast; // Safari
  image-rendering: optimize-contrast;         // CSS3 Proposed
  image-rendering: crisp-edges;               // CSS4 Proposed
  image-rendering: pixelated;                 // CSS4 Proposed
  -ms-interpolation-mode: nearest-neighbor;   // IE8+
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Image frame
//
// Highly configurable and efficient image scale, crop, and anchor images in a container
//
//----------------------------------------------------------------------------------------------------------------------

.img-anchor ( @aspect; @anchor: center ) when ( @anchor = center ) {
  &:extend( .position.center );
}

.img-anchor ( @aspect; @anchor )
  when ( @aspect = portrait )
  and  ( @anchor = start ) {
  &:extend( .position.top );
}

.img-anchor ( @aspect: landscape; @anchor )
  when ( @aspect = landscape )
  and  ( @anchor = start ) {
  &:extend( .position.left );
}

.img-anchor ( @aspect; @anchor )
  when ( @aspect = portrait )
  and  ( @anchor = end ) {
  &:extend( .position.bottom );
}

.img-anchor ( @aspect: landscape; @anchor )
  when ( @aspect = landscape )
  and  ( @anchor = end ) {
  &:extend( .position.right );
}

.img-scale ( @crop: true; @aspect ) when ( @crop ) {
  min-height: 100%;
  min-width: 100%;

  object-fit: cover;
}

.img-scale ( @crop; @aspect ) when ( @crop = false ){
  height: auto;
  width: auto;

  top: 50%;
  left: 50%;

  max-height: 100%;
  max-width: 100%;

  object-fit: contain;
}



.img-scale ( @crop: true; @aspect: landscape ) when ( @crop )
                                               and ( @aspect = landscape ){
  height: 100%;
}

.img-scale ( @crop: true; @aspect ) when ( @crop )
                                    and ( @aspect = portrait ){
  width: 100%;
}

.img-scale ( @crop; @aspect; @sharpen: true ) when ( @sharpen ) {
  &:extend( .img-sharpen );
}



.img-frame ( @aspect; @crop; @anchor ) {
    position: relative;
    overflow: hidden;
}

.img-frame ( @aspect; @crop: true; @anchor ) when ( ispixel( @crop ) ){
  > img,
  > video {
    padding: @crop;
  }
}

.img-frame ( @aspect: landscape; @crop: true; @anchor ){
  > img,
  > video {
    .img-scale( @crop; @aspect );
  }
}

.img-frame ( @aspect: landscape; @crop; @anchor: center ) {
  > img,
  > video {
    .img-anchor( @aspect; @anchor );
  }
}



// Application Classes
.img-frame {

  &:not( .center ):not( .top ):not( .right ):not( .bottom ):not( .left ),
  &.nocrop {
    .img-frame( landscape; false; center );
  }

  &.center {
    .img-frame( landscape; true; center );

    &.portrait {
      .img-frame( portrait; true; center );
    }
  }

  &.left {
    .img-frame( landscape; true; start );
  }

  &.right {
    .img-frame( landscape; true; end );
  }

  &.top {
    .img-frame( portrait; true; start );
  }

  &.bottom {
    .img-frame( portrait; true; end );
  }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Twin Mountain Peaks Shape
//
// @mountain-color: by default this is set to inherit; when placed within a well with an overlay class applied it will
// inert the container color. If this is not desired specify the necessary color.
// @first-mountain-size: default is 20px. This is the mobile view of the left shape.
// @second-mountain-size: default is 15px. This is the mobile view of the right shape.
// @first-sm-mountain-size: default is 30px. This is the non-mobile view of the right shape.
// @second-sm-mountain-size: default is 20px. This is the non-mobile view of the right shape.
//----------------------------------------------------------------------------------------------------------------------
.twin-mountain-peaks
( @mountain-color: inherit;
@first-mountain-size: 2rem;
@second-mountain-size: 1.5rem;
@first-sm-mountain-size: 3rem;
@second-sm-mountain-size: 2rem; ) {
    border-color: inherit; // if @mountain-color is inherit it will inherit it's color from an overlay class defined in the parent container.
    display: inline-block;
    height: @first-mountain-size;
    &:before {
        content: "";
        position: absolute;
        border-left: @first-mountain-size solid transparent;
        border-right: @first-mountain-size solid transparent;
        border-bottom: @first-mountain-size solid;
        border-bottom-color: @mountain-color;

    }
    &:after {
        content: "";
        position: absolute;
        .translate(2.2rem; 0.5rem );
        width: 0;
        height: 0;
        border-left: @second-mountain-size solid transparent;
        border-right: @second-mountain-size solid transparent;
        border-bottom: @second-mountain-size solid;
        border-bottom-color: @mountain-color;

    }
    @media (min-width: @screen-sm-min) {
        height: @first-sm-mountain-size;
        width: auto;
        &:before {
            border-left: @first-sm-mountain-size solid transparent;
            border-right: @first-sm-mountain-size solid transparent;
            border-bottom: @first-sm-mountain-size solid;
            border-bottom-color: @mountain-color;
        }
        &:after {
            .translate(3.6rem; 1rem );
            border-left: @second-sm-mountain-size solid transparent;
            border-right: @second-sm-mountain-size solid transparent;
            border-bottom: @second-sm-mountain-size solid;
            border-bottom-color: @mountain-color;
        }

    }
}
