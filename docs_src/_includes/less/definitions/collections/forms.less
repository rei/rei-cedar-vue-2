////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//            THEME
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

@type    : 'collection';
@element : 'forms';

@import (multiple) '../../theme.config';

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// FORMS
//
//TOC:
//
// :Normalize non-controls
// :Common form controls
// :Common form controls --Disabled and read-only inputs
// :Validation messages
// :Form groups
// :Static form control text
// :Form control sizing
// :Help text
// :Inline forms
// :Horizontal forms
// :Horizontal forms --Validation states
//
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Normalize non-controls
//
// Restyle and baseline non-control form elements.
//
//----------------------------------------------------------------------------------------------------------------------
fieldset {
    padding: 0;
    margin: 0;
    border: 0;
    min-width: 0;
}

legend {
    display: block;
    width: 100%;
    padding: 0;
    margin-bottom: @line-height-computed;
    font-size: (@font-size-base * 1.5);
    line-height: inherit;
    color: @legend-color;
    border: 0;
    border-bottom: 0.1rem solid @legend-border-color;
}

label {
    .cdr-input-base-label-mixin();
    .form-inline & {
        display: block;
    }
    .required & {
       .cdr-input-required-label-mixin();
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Common form controls
//
// Shared size and type resets for form controls. Apply `.form-control` to any
// of the following form controls:
//
//----------------------------------------------------------------------------------------------------------------------
.form-control {
    &:extend( .input-md all );

    // Placeholder
    .placeholder();

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Disabled and read-only inputs
    //
    // HTML5 says that controls under a fieldset > legend:first-child won't be
    // disabled if the fieldset is disabled. Due to implementation difficulty, we
    // don't honor that edge case; we style them as disabled anyway.
    //
    //----------------------------------------------------------------------------------------------------------------------
    &[disabled],
    &[readonly],
    fieldset[disabled] & {
        color:  @cdr-color-text-input-disabled;
        cursor: @cursor-disabled;
    }
    // Reset height for `textarea`s
    textarea& {
        height: auto;
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Validation messages
//
// extends alert
//
//----------------------------------------------------------------------------------------------------------------------
.form-control {
    .rei-form-control-focus();
    outline: none;
    .has-error & {
        border-color: @input-border-error;
        border-bottom-right-radius: 0;
        border-bottom-left-radius: 0;
        .rei-form-control-focus( @input-border-error );
      > .control-label {
        color: @input-border-error;
      }
     }
    .has-warning & {
        border-color: @input-border-warning;
        border-bottom-right-radius: 0;
        border-bottom-left-radius: 0;
        .rei-form-control-focus( @input-border-warning );
    }
}

.field-msg {
    position: relative;
    display: block;
    padding: @cdr-space-half-x;
    line-height: 1;
    border-style: solid;
    border-width: 1px;
    border-top: none;
    &:last-of-type {
        border-bottom-right-radius: @cdr-radius-softer;
        border-bottom-left-radius: @cdr-radius-softer;
    }
    > .alert-text {
        .cdr-text-utility-sans-200();
    }
}

.has-error {
      > .control-label {
        color: @input-border-error;
      }
}

.field-msg_error {
    &:extend( .field-msg all );
    border-color: @input-border-error;
    background-color: @input-background-error-alert;
}
.field-msg_warning  {
     &:extend( .field-msg all );
     border-color: @input-border-warning;
    background-color: @input-background-warning-alert;
}
.field-msg_info  {
     &:extend( .field-msg all);
}
.field-msg_help {
     &:extend( .field-msg all);
}

//Notifications
.field-note {
    display: inline-block;
}

.help-block {
    .has-error & {
        color: lighten(@text-color, 25%); //base on what bootstrap uses
    }
}

.required-form {
    &:before {
        &:extend( .h4 );
        content: " * Required ";
        display: inline-block;
        line-height: @line-height-closed;
        margin-bottom: 3rem;
        max-width: 100%; // Force IE8 to wrap long content (see https://github.com/twbs/bootstrap/issues/13141)
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Form groups
//
// Designed to help with the organization and spacing of vertical forms.
//
//----------------------------------------------------------------------------------------------------------------------
.form-group {
    margin-bottom: @form-group-margin-bottom;
}


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Form control sizing
//
// Build on `.form-control` with modifier classes to decrease or increase the
// height and font-size of form controls.
//
// The `.form-group-* form-control` variations are sadly duplicated to avoid the
// issue documented in https://github.com/twbs/bootstrap/issues/15074.
//
//----------------------------------------------------------------------------------------------------------------------
.form-group-sm {
    .form-control {
        &:extend( .input-sm all );
    }
}


.form-group-lg {
    .form-control {
        &:extend( .input-lg all );
    }
}

.has-feedback {
    // Enable absolute positioning
    position: relative;

    // Ensure icons don't overlap text
    .form-control {
        padding-right: 4rem;
    }
}
// Feedback icon (requires .icon classes)
.form-control-feedback {
    position: absolute;
    top: 3.6rem;
    right: 0.8rem;
    z-index: 2; // Ensure icon is above input groups
    display: block;
    text-align: center;
    pointer-events: none;
}

.form-group > [class*=" col-"] > .form-control-feedback,
.form-group > [class^=col-] > .form-control-feedback {
    right: calc((@grid-gutter-width / 2) + 0.8rem); //TODO mediaquery for multiple GGW's
    //top: @font-size-base;
    @media( min-width: @screen-sm-min ) {
        right: calc((@grid-gutter-width-sm / 2) + 0.8rem);
    }
    @media( min-width: @screen-md-min ) {
        right: calc((@grid-gutter-width-md / 2) + 0.8rem);
    }
}

// Reposition feedback icon if input has visible label above
.has-feedback label {
    &.sr-only ~ .form-control-feedback {
        top: 1.2rem;
    }
}
.input-lg + .form-control-feedback {
    top: 4rem;
}
.input-sm + .form-control-feedback {
    font-size: 1.6rem;
    top: 3.2rem;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Inline forms
//
// Make forms appear inline(-block) by adding the `.form-inline` class. Inline
// forms begin stacked on extra small (mobile) devices and then go inline when
// viewports reach <768px.
//
// Requires wrapping inputs and labels with `.form-group` for proper display of
// default HTML form controls and our custom form controls (e.g., input groups).
//
//----------------------------------------------------------------------------------------------------------------------
.form-inline {
        &:first-child {
            margin-left: 0;
        }
        &:last-child {
            margin-right: 0;
        }
        .form-group {
            @media( min-width: @screen-sm-min ) {
                margin-right: @group-push;
            }
        }

    // Kick in the inline
    @media (min-width: @screen-sm-min) {
        // Inline-block all the things for "inline"
        .form-group {
            display: inline-block;
            margin-bottom: 0;
            vertical-align: top;
            .vertical-push-md();
            &.non-label {
                margin-top: 2.5rem;
            }
        }

        // In navbar-form, allow folks to *not* use `.form-group`
        .form-control {
            display: inline-block;
            width: auto; // Prevent labels from stacking above inputs in `.form-group`
            vertical-align: middle;
        }

        // Make static controls behave like regular ones
        .form-control-static {
            display: inline-block;
        }
    }
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//
// Horizontal forms
//
// Horizontal forms are built on grid classes and allow you to create forms with
// labels on the left and inputs on the right.
//
//----------------------------------------------------------------------------------------------------------------------
.form-horizontal {

    // Make form groups behave like rows
    .form-group {
        .make-row();
    }

    // Reset spacing and right align labels, but scope to media queries so that
    // labels on narrow viewports stack the same as a default form example.
    @media (min-width: @screen-sm-min) {
        .control-label {
            text-align: right;
            margin-bottom: 0;
            padding-top: (@padding-base-vertical + 1); // Default padding plus a border
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Validation states
    //
    // Reposition the icon because it's now within a grid column and columns have
    // `position: relative;` on them. Also accounts for the grid gutter padding.
    //
    //----------------------------------------------------------------------------------------------------------------------
    .has-feedback .form-control-feedback {
        right: (@grid-gutter-width / 2); //TODO mediaquery for multiple GGW's
        //top: @font-size-base;
        @media( min-width: @screen-sm-min ) {
            right: (@grid-gutter-width-sm / 2);
        }
        @media( min-width: @screen-md-min ) {
            right: ( @grid-gutter-width-md / 2);
        }
    }

    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    //
    // Form group sizes
    //
    // Quick utility class for applying `.input-lg` and `.input-sm` styles to the
    // inputs and labels within a `.form-group`.
    //
    //------------------------------------------------------------------------------------------------------------------
    .form-group-lg {
        @media (min-width: @screen-sm-min) {
            .control-label {
                padding-top: ((@padding-large-vertical * @line-height-large) + 1);
            }
        }
    }
    .form-group-sm {
        @media (min-width: @screen-sm-min) {
            .control-label {
                padding-top: (@padding-small-vertical + 1);
            }
        }
    }
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//            OVERRIDES
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
.loadUIOverrides();
